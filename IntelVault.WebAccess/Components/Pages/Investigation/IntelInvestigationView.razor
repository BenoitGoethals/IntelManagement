@page "/IntelInvestigation"
@using IntelVault.WebAccess.Components.Pages.OpenSource
@using IntelVault.WebAccess.Components.Pages.common
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using IntelVault.ApplicationCore.Model
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Services
@using IntelVault.Infrastructure.repos
@using Microsoft.AspNetCore.Authorization
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<IntelInvestigationFile> Logger
@inject IIntelService<PersonOfInterest> ServicePersonIntelService
@inject IIntelService<IntelInvestigationFile> IntelInvestigationFileService
@inject IGlobalService GlobalService
@inject IDocumentService IntelService
@attribute [Authorize(Roles = "ADMIN")]

<DialogPersonOfIntrestSearch IsDialogVisiblePerson="@IsDialogVisiblePerson" Selected="@SelectedPerson"></DialogPersonOfIntrestSearch>

<DialogIntelDocumentsSearch IsDialogVisibleIntelDocument="@IsDialogIntelDocumentsVisible" Selected="@SelectedDocument"></DialogIntelDocumentsSearch>

<DialogEvidenceCollectedSearch IsDialogVisibleEvidenceCollected="@IsDialogBaseLineVisible" Selected="@SelectedEvidence"></DialogEvidenceCollectedSearch>


<EditForm Model="@IntelInvest" FormName="AddCommon">
    <AntiforgeryToken />
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <SfTab>
        <TabItems>

            <TabItem>
                <HeaderTemplate>Common</HeaderTemplate>
                <ContentTemplate>
                    <style>
                        .multiline {
                            margin-top: 60px;
                            width: 20%;
                        }

                        #Card {
                            width: 300px;
                        }
                    </style>

                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <SfTextBox @bind-Value="IntelInvest.CaseNumber" Placeholder="Case Number" class="form-control" />
                            <ValidationMessage For="() => IntelInvest.CaseNumber" />
                        </div>
                        <div class="form-group col-md-3">
                            <SfDropDownList TValue="InvestigationStatus?" Width="300px" TItem="string" class="form-control" Placeholder="Select a Type " @bind-Value="IntelInvest.InvestigationStatus" DataSource="@InvestigationStatusItems">
                                @* <DropDownListEvents TValue="InvestigationStatus" ValueChange="OnDropDownListValueChange"></DropDownListEvents> *@
                            </SfDropDownList>
                        </div>
                        <div class="form-group col-md-6">

                            <SfTextBox @bind-Value="IntelInvest.Description" Multiline="true" Placeholder="Description" class="form-control" />
                            <ValidationMessage For="() => IntelInvest.Description" />
                        </div>

                        <div class="form-group col-md-2">
                            <SfDateTimePicker TValue="DateTime?" Placeholder="Started DateTimeDate" @bind-Value="@IntelInvest.StartedDateTimeDate" Max="DateTime.Now" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
                        </div>

                        <div class="form-group col-md-2">
                            <SfDateTimePicker TValue="DateTime?" Placeholder="Ended DateTimeDate" @bind-Value="@IntelInvest.EndedDateTimeDate" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
                        </div>


                        <div class="form-group col-md-3">
                            <SfTextBox @bind-Value="IntelInvest.InvestigatorName" Placeholder="Name" class="form-control" />
                            <ValidationMessage For="() => IntelInvest.InvestigatorName" />
                        </div>
                        <div class="form-group col-md-3">
                            <SfTextBox @bind-Value="IntelInvest.InvestigatorBadgeNumber" Placeholder="Alias" class="form-control" />
                            <ValidationMessage For="() => IntelInvest.InvestigatorBadgeNumber" />
                        </div>
                        <div class="form-group col-md-3">
                            <SfTextBox @bind-Value="IntelInvest.InvestigatorNote" Placeholder="Name" class="form-control" />
                            <ValidationMessage For="() => IntelInvest.InvestigatorNote" />
                        </div>
                        <ValidationSummary />
                    </div>

                    <div class="form-group col-md-6">
                        <SfButton @ref="_cancelBtn" CssClass="btn btn-primary" @onclick="@(Cancel)" IsPrimary="false">Cancel</SfButton>
                    </div>
                    <div class="form-group col-md-6">
                        @if (Update)
                        {
                            <SfButton IsPrimary="true" @onclick="SubmitForm">Update Investigation</SfButton>
                        }
                        else
                        {
                            <SfButton IsPrimary="true" @onclick="SubmitForm">Add Investigation</SfButton>
                        }

                    </div>
                </ContentTemplate>

            </TabItem>
            <TabItem>
                <HeaderTemplate>Long Description</HeaderTemplate>
                <ContentTemplate>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <SfRichTextEditor ShowCharCount="true" Height="500" SaveInterval="5000" AutoSaveOnIdle="true" @bind-Value="@IntelInvest.LongDescription" />
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <HeaderTemplate>Conclusion</HeaderTemplate>
                <ContentTemplate>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <SfRichTextEditor ShowCharCount="true" Height="500" SaveInterval="5000" AutoSaveOnIdle="true" @bind-Value="@IntelInvest.Conclusion" />
                        </div>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <HeaderTemplate>PersonOfInterests</HeaderTemplate>
                <ContentTemplate>
                    @if (IntelInvest?.PersonOfInterests != null)
                    {
                        <div class="row">
                            @foreach (var val in IntelInvest?.PersonOfInterests)
                            {

                                <div class="col-sm-3">
                                    <SfCard ID="Card" CssClass="width: 200px;">
                                        <CardHeader Title="@val.Name" />
                                        <CardContent>
                                            <div>
                                                @val.Nationality
                                            </div>
                                            <div>
                                                @val.PoliticalGroup
                                            </div>
                                            <div>
                                                @if (val?.Pictures.Count > 0 && val.Pictures[0] != null)
                                                {
                                                    <img Width="100" Height="100" src="data:image/png;base64, @Convert.ToBase64String(val?.Pictures[0]?.Picture)" alt="" />
                                                }
                                            </div>
                                            <div>
                                                <SfButton @ref="_deleteBtn" @onclick="@((args) => DeletePersonOfInterests(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                            </div>
                                        </CardContent>
                                    </SfCard>
                                </div>
                            }
                        </div>
                    }

                    <style>
                        #Card {
                            width: 300px;
                        }
                    </style>
                    <div class="form-group col-md-6">
                        <SfButton IsPrimary="false" CssClass="e-success" @onclick='()=>OpenDialog("person")'>search</SfButton>
                    </div>


                </ContentTemplate>
            </TabItem>
            <TabItem>
                <HeaderTemplate>IntelDocuments</HeaderTemplate>
                <ContentTemplate>
                    @if (IntelInvest?.IntelDocuments != null)
                    {
                        <div class="row">
                            @foreach (var val in IntelInvest?.IntelDocuments)
                            {
                                <div class="col-sm-3">
                                    <SfCard ID="Card" CssClass="width: 200px;">
                                        <CardHeader Title="@val.Description" />
                                        <CardContent>
                                            <div>
                                                @val.DocumentType
                                            </div>
                                            <div>
                                                @val.IntelType
                                            </div>
                                            <div>
                                                @val.TimeCreated
                                            </div>
                                            <div>
                                                <SfButton @ref="_deleteBtn" @onclick="@((args) => DeleteIntelDocuments(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                            </div>
                                        </CardContent>
                                    </SfCard>
                                </div>
                            }
                        </div>
                    }
                    <style>
                        #Card {
                            width: 300px;
                        }
                    </style>

                    <div class="form-group col-md-6">
                        <SfButton IsPrimary="false" CssClass="e-success" @onclick='()=>OpenDialog("intel")'>search</SfButton>
                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <HeaderTemplate>EvidenceCollected</HeaderTemplate>
                <ContentTemplate>
                    @if (IntelInvest?.EvidenceCollected != null)
                    {
                        <div class="row">
                            @foreach (var val in IntelInvest?.EvidenceCollected)
                            {
                                <div class="col-sm-3">
                                    <SfCard ID="Card" CssClass="width: 200px;">
                                        <CardHeader Title="@val.IntelType.ToString()" />
                                        <CardContent>
                                            <div>
                                                @val.IntelType.ToString()
                                            </div>
                                            <div>
                                                <SfButton @ref="_deleteBtn" @onclick="@((args) => DeleteEvidenceCollected(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                            </div>
                                        </CardContent>
                                    </SfCard>
                                </div>
                            }
                        </div>
                    }
                    <style>
                        #Card {
                            width: 300px;
                        }
                    </style>

                    <div class="form-group col-md-6">
                        <SfButton IsPrimary="false" CssClass="e-success" @onclick='()=>OpenDialog("collect")'>search</SfButton>
                    </div>

                </ContentTemplate>
            </TabItem>
            <TabItem>
                <HeaderTemplate>ExpertOpinions</HeaderTemplate>
                <ContentTemplate>

                    <div class="form-row">
                        <ViewListBigItem Items="@ExpertOpinionsList"></ViewListBigItem>
                    </div>

                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
   
</EditForm>
@code {
    [Parameter] public IntelInvestigationFile? IntelInvest { get; set; }
    [Parameter] public EventCallback OnFileInvestChanged { get; set; }
    [Parameter] public bool Update { get; set; }


    public List<ListItem> ExpertOpinionsList = new List<ListItem>();
    public string[] InvestigationStatusItems = Enum.GetNames(typeof(InvestigationStatus));

    private FluentValidationValidator? _fluentValidationValidator;
    private SfButton? _deleteBtn;
    private SfButton? _cancelBtn;


    bool IsDialogBaseLineVisible { get; set; } = false;
    bool IsDialogVisiblePerson { get; set; } = false;
    bool IsDialogIntelDocumentsVisible { get; set; } = false;


    void CancelDialog()
    {
        IsDialogVisiblePerson = false;
        IsDialogIntelDocumentsVisible = false;
        IsDialogBaseLineVisible = false;
    }


    void OpenDialog(string dialog)
    {
        switch (dialog)
        {
            case "person":
                IsDialogVisiblePerson = true;
                break;
            case "intel":
                IsDialogIntelDocumentsVisible = true;
                break;
            case "collect":
                IsDialogBaseLineVisible = true;
                break;
        }

    }

    protected override Task OnInitializedAsync()
    {
        IntelInvest ??= new IntelInvestigationFile();
        if (Update)
        {
            if (IntelInvest.ExpertOpinions != null) ExpertOpinionsList = IntelInvest.ExpertOpinions;
        }

        return Task.CompletedTask;
    }



    private async Task Cancel(MouseEventArgs args)
    {
        await OnFileInvestChanged.InvokeAsync();
    }

    private async Task SubmitForm()
    {
        IntelInvest.ShortContent = IntelInvest.Description;
        IntelInvest.ExpertOpinions = ExpertOpinionsList;

        if (await _fluentValidationValidator!.ValidateAsync())
        {
            if (Update)
            {
                await IntelInvestigationFileService.Update(IntelInvest);
                await OnFileInvestChanged.InvokeAsync();
            }
            else
            {
                await IntelInvestigationFileService.Add(IntelInvest);
                await OnFileInvestChanged.InvokeAsync();
            }

        }

       
    }

    protected void Changed()
    {
        StateHasChanged();
    }

    private Task DeletePersonOfInterests(MouseEventArgs args, PersonOfInterest? context)
    {
        if (context != null) IntelInvest?.PersonOfInterests?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }


    private Task DeleteEvidenceCollected(MouseEventArgs args, BaseIntel? context)
    {
        if (context != null) IntelInvest?.EvidenceCollected?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task DeleteIntelDocuments(MouseEventArgs args, IntelDocument? context)
    {
        if (context != null) IntelInvest?.IntelDocuments?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void SelectedPerson(List<PersonOfInterest?> selectedRecords)
    {
        foreach (var sel in selectedRecords)
        {
            if (IntelInvest?.PersonOfInterests == null || IntelInvest == null || IntelInvest.PersonOfInterests.Exists(s => s.Equals(sel))) continue;
            if (sel != null) IntelInvest?.PersonOfInterests?.Add(sel);
        }

        CancelDialog();
    }

    private void SelectedDocument(List<IntelDocument?> selectedDocuments)
    {
        foreach (var sel in selectedDocuments)
        {
            if (IntelInvest?.IntelDocuments != null && IntelInvest != null && !IntelInvest.IntelDocuments.Exists(s => s.Equals(sel)))
            {
                IntelInvest?.IntelDocuments?.Add(sel);
            }
        }

        CancelDialog();
    }

    private void SelectedEvidence(List<BaseIntel?> selectedBaseIntels)
    {
        foreach (var sel in selectedBaseIntels)
        {
            if (IntelInvest?.EvidenceCollected != null && IntelInvest != null && !IntelInvest.EvidenceCollected.Exists(s => s.Equals(sel)))
            {
                IntelInvest?.EvidenceCollected?.Add(sel);
            }

        }

        CancelDialog();

    }


}
