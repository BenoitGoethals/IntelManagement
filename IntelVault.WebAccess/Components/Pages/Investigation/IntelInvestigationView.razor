@page "/IntelInvestigation"
@using IntelVault.WebAccess.Components.Pages.OpenSource
@using IntelVault.WebAccess.Components.Pages.common
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using IntelVault.ApplicationCore.Model
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.IntelData
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Services
@using IntelVault.Infrastructure.repos
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<IntelInvestigationFile> Logger
@inject IIntelService<PersonOfInterest> ServicePersonIntelService
@inject IIntelService<IntelInvestigationFile> IntelInvestigationFileService
@inject IGlobalService GlobalService
@inject IDocumentService IntelService


<SfDialog @bind-Visible="@IsDialogVisible" ID="GridPersonOfInterestsGrid" Height="500px" Width="700px">

    <DialogTemplates>
        <Content>

            <SfGrid @ref="_gridPersonOfInterests" DataSource="@_personOfInterests" AllowSelection="true" AllowPaging="true" AllowSorting="true" AllowFiltering="true" TValue="PersonOfInterest">
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridPageSettings PageSize="6"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(PersonOfInterest.Name) HeaderText="HumIntType" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(PersonOfInterest.PoliticalGroup) HeaderText="PoliticalGroup" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(PersonOfInterest.Nationality) HeaderText="Nationality" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
                <GridPageSettings PageSize="5"></GridPageSettings>

            </SfGrid>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="false" @onclick='()=>CloseDialog("person")' />
        <DialogButton Content="Cancel" OnClick="@CancelDialog" />
    </DialogButtons>
</SfDialog>

<SfDialog @bind-Visible="@IsDialogIntelDocumentsVisible" Height="500px" Width="700px" ID="GridIntelDocuments">

    <DialogTemplates>
        <Content>

            <SfGrid @ref="_intelDocumentRef" DataSource="@_intelDocuments" AllowSelection="true" AllowPaging="true" AllowSorting="true" AllowFiltering="true" TValue="IntelDocument">
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridPageSettings PageSize="6"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(IntelDocument.IntelType) HeaderText="TypeIntel" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.DocumentType) HeaderText="DocumentType" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.Description) HeaderText="SelectedListItem" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.TimeCreated) HeaderText="TimeCreated" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
                <GridPageSettings PageSize="5"></GridPageSettings>

            </SfGrid>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="false" @onclick='()=>CloseDialog("intel")' />
        <DialogButton Content="Cancel" OnClick="@CancelDialog" />
    </DialogButtons>
</SfDialog>

<SfDialog @bind-Visible="@IsDialogBaseLineVisible" Height="500px" Width="700px"  ID="GridBaseLine">

    <DialogTemplates>
        <Content>

            <SfGrid @ref="_baseIntelRef" DataSource="@_evidenceCollected" AllowSelection="true" AllowPaging="true" AllowSorting="true" AllowFiltering="true" TValue="BaseIntel">
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridPageSettings PageSize="6"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(BaseIntel.IntelType) HeaderText="TypeIntel" TextAlign="@TextAlign.Left" Width="65"></GridColumn>

                    <GridColumn Field=@nameof(BaseIntel.ShortContent) HeaderText="SelectedListItem" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(MongoEntity.CreatedDtg) HeaderText="TimeCreated" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
                <GridPageSettings PageSize="5"></GridPageSettings>

            </SfGrid>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="false" @onclick='()=>CloseDialog("collect")' />
        <DialogButton Content="Cancel" OnClick="@CancelDialog" />
    </DialogButtons>
</SfDialog>

<EditForm Model="@IntelInvest"  FormName="AddCommon">
    <AntiforgeryToken />
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <SfTab>
    <TabItems>

    <TabItem>
        <HeaderTemplate>Common</HeaderTemplate>
        <ContentTemplate>
            <style>
                        .multiline {
                            margin-top: 60px;
                            width: 20%;
                        }

                        #Card {
                            width: 300px;
                        }
                    </style>

            <div class="form-row">
                <div class="form-group col-md-3">
                    <SfTextBox @bind-Value="IntelInvest.CaseNumber" Placeholder="Case Number" class="form-control" />
                    <ValidationMessage For="() => IntelInvest.CaseNumber" />
                </div>
                <div class="form-group col-md-3">
                    <SfDropDownList TValue="InvestigationStatus?" Width="300px" TItem="string" class="form-control" Placeholder="Select a Type " @bind-Value="IntelInvest.InvestigationStatus" DataSource="@InvestigationStatusItems">
                        @* <DropDownListEvents TValue="InvestigationStatus" ValueChange="OnDropDownListValueChange"></DropDownListEvents> *@
                    </SfDropDownList>
                </div>
                <div class="form-group col-md-6">

                    <SfTextBox @bind-Value="IntelInvest.Description" Multiline="true" Placeholder="Description" class="form-control" />
                    <ValidationMessage For="() => IntelInvest.Description" />
                </div>

                <div class="form-group col-md-2">
                    <SfDateTimePicker TValue="DateTime?" Placeholder="Started DateTimeDate" @bind-Value="@IntelInvest.StartedDateTimeDate" Max="DateTime.Now" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
                </div>
                      
                <div class="form-group col-md-2">
                    <SfDateTimePicker TValue="DateTime?" Placeholder="Ended DateTimeDate" @bind-Value="@IntelInvest.EndedDateTimeDate"  Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
                </div>


                <div class="form-group col-md-3">
                    <SfTextBox @bind-Value="IntelInvest.InvestigatorName" Placeholder="Name" class="form-control" />
                    <ValidationMessage For="() => IntelInvest.InvestigatorName" />
                </div>
                <div class="form-group col-md-3">
                    <SfTextBox @bind-Value="IntelInvest.InvestigatorBadgeNumber" Placeholder="Alias" class="form-control" />
                    <ValidationMessage For="() => IntelInvest.InvestigatorBadgeNumber" />
                </div>
                <div class="form-group col-md-3">
                    <SfTextBox @bind-Value="IntelInvest.InvestigatorNote" Placeholder="Name" class="form-control" />
                    <ValidationMessage For="() => IntelInvest.InvestigatorNote" />
                </div>



                      

                <ValidationSummary />
            </div>

            <div class="form-group col-md-6">
                <SfButton @ref="_cancelBtn" CssClass="btn btn-primary" @onclick="@(Cancel)" IsPrimary="false">Cancel</SfButton>
            </div>

        </ContentTemplate>

    </TabItem>
    <TabItem>
        <HeaderTemplate>Long Description</HeaderTemplate>
        <ContentTemplate>


            <div class="form-row">
                <div class="form-group col-md-6">
                    <SfRichTextEditor ShowCharCount="true" Height="500" SaveInterval="5000" AutoSaveOnIdle="true" @bind-Value="@IntelInvest.LongDescription" />
                </div>
            </div>


        </ContentTemplate>
    </TabItem>
    <TabItem>
        <HeaderTemplate>Conclusion</HeaderTemplate>
        <ContentTemplate>

            <div class="form-row">
                <div class="form-group col-md-6">
                    <SfRichTextEditor ShowCharCount="true" Height="500" SaveInterval="5000" AutoSaveOnIdle="true" @bind-Value="@IntelInvest.Conclusion" />
                </div>
            </div>
                    

        </ContentTemplate>
    </TabItem>
    <TabItem>
        <HeaderTemplate>PersonOfInterests</HeaderTemplate>
        <ContentTemplate>

            @if (IntelInvest?.PersonOfInterests != null)
            {
                <div class="row">
                    @foreach (var val in IntelInvest?.PersonOfInterests)
                    {

                        <div class="col-sm-3">


                            <SfCard ID="Card" CssClass="width: 200px;">
                                <CardHeader Title="@val.Name" />
                                <CardContent>
                                    <div>
                                        @val.Nationality
                                    </div>
                                    <div>
                                        @val.PoliticalGroup
                                    </div>
                                    <div>

                                        @if (val?.Pictures.Count > 0 && val.Pictures[0] != null)
                                        {
                                            <img Width="100" Height="100" src="data:image/png;base64, @Convert.ToBase64String(val?.Pictures[0]?.Picture)" alt=""/>
                                        }
                                                
                                    </div>
                                    <div>
                                        <SfButton @ref="_deleteBtn" @onclick="@((args) => DeletePersonOfInterests(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                    </div>
                                </CardContent>
                            </SfCard>

                        </div>

                    }
                </div>
            }


            <style>
                        #Card {
                            width: 300px;
                        }
                    </style>
            <div class="form-group col-md-6">
                <SfButton IsPrimary="false"  CssClass="e-success" @onclick='()=>OpenDialog("person")'>search</SfButton>
            </div>


        </ContentTemplate>
    </TabItem>
    <TabItem>
        <HeaderTemplate>IntelDocuments</HeaderTemplate>
        <ContentTemplate>


            @if (IntelInvest?.IntelDocuments != null)
            {
                <div class="row">
                    @foreach (var val in IntelInvest?.IntelDocuments)
                    {

                        <div class="col-sm-3">


                            <SfCard ID="Card" CssClass="width: 200px;">
                                <CardHeader Title="@val.Description" />
                                <CardContent>
                                    <div>
                                        @val.DocumentType
                                    </div>
                                    <div>
                                        @val.IntelType
                                    </div>
                                    <div>
                                        @val.TimeCreated
                                    </div>
                                    <div>
                                        <SfButton @ref="_deleteBtn" @onclick="@((args) => DeleteIntelDocuments(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                    </div>

                                </CardContent>
                            </SfCard>
                        </div>
                    }
                </div>
            }


            <style>
                        #Card {
                            width: 300px;
                        }
                    </style>

            <div class="form-group col-md-6">
                <SfButton IsPrimary="false" CssClass="e-success" @onclick='()=>OpenDialog("intel")'>search</SfButton>
            </div>

        </ContentTemplate>
    </TabItem>
    <TabItem>
        <HeaderTemplate>EvidenceCollected</HeaderTemplate>
        <ContentTemplate>

            @if (IntelInvest?.EvidenceCollected != null)
            {
                <div class="row">
                    @foreach (var val in IntelInvest?.EvidenceCollected)
                    {

                        <div class="col-sm-3">


                            <SfCard ID="Card" CssClass="width: 200px;">

                                <CardHeader Title="@val.IntelType.ToString()" />
                                <CardContent>
                                    <div>
                                        @val.IntelType.ToString()
                                    </div>
                                    <div>
                                        <SfButton @ref="_deleteBtn" @onclick="@((args) => DeleteEvidenceCollected(args, val))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                                    </div>
                                </CardContent>
                            </SfCard>

                        </div>

                    }
                </div>
            }
            <style>
                        #Card {
                            width: 300px;
                        }
                    </style>

            <div class="form-group col-md-6">
                <SfButton IsPrimary="false" CssClass="e-success"  @onclick='()=>OpenDialog("collect")'>search</SfButton>
            </div>

        </ContentTemplate>
    </TabItem>
    <TabItem>
        <HeaderTemplate>ExpertOpinions</HeaderTemplate>
        <ContentTemplate>

            <div class="form-row">
                <ViewListBigItem Items="@ExpertOpinionsList"></ViewListBigItem>
            </div>

        </ContentTemplate>
    </TabItem>
    </TabItems>
    </SfTab>
    <div class="form-group col-md-6">
        @if (Update)
        {
            <SfButton IsPrimary="true" @onclick="SubmitForm">Update</SfButton>
        }
        else
        {
            <SfButton IsPrimary="true" @onclick="SubmitForm">Add</SfButton>
        }

    </div>
</EditForm>
@code {
    [Parameter]
    public IntelInvestigationFile? IntelInvest { get; set; }
    [Parameter]
    public EventCallback OnFileInvestChanged { get; set; }
    [Parameter] public bool Update { get; set; }
    private List<PersonOfInterest>? _personOfInterests;
    private List<IntelDocument>? _intelDocuments;
    private List<BaseIntel>? _evidenceCollected;

    public List<ListItem> ExpertOpinionsList = new List<ListItem>();
    public string[] InvestigationStatusItems = Enum.GetNames(typeof(InvestigationStatus));

    private FluentValidationValidator? _fluentValidationValidator;
    private SfButton? _deleteBtn;
    private SfButton? _cancelBtn;
    private SfGrid<PersonOfInterest>? _gridPersonOfInterests;
    private SfGrid<IntelDocument>? _intelDocumentRef;
    private SfGrid<BaseIntel>? _baseIntelRef;


    bool IsDialogBaseLineVisible { get; set; } = false;
    bool IsDialogVisible { get; set; } = false;
    bool IsDialogIntelDocumentsVisible { get; set; } = false;


    [Obsolete("Obsolete")]
    async Task CloseDialog(string dialog)
    {
        switch (dialog)
        {
            case "person":
                var selectedRecords = await _gridPersonOfInterests.GetSelectedRecords();
                foreach (var sel in selectedRecords)
                {
                    if (IntelInvest?.PersonOfInterests != null && IntelInvest != null && !IntelInvest.PersonOfInterests.Exists(s => s.Equals(sel)))
                    {
                        IntelInvest?.PersonOfInterests?.Add(sel);
                    }

                }
                await _gridPersonOfInterests.Refresh();
                IsDialogVisible = false;
                break;

            case "intel":
                var selectedRecordsIntelDocumentRef = await _intelDocumentRef.GetSelectedRecords();
                foreach (var sel in selectedRecordsIntelDocumentRef)
                {
                    if (IntelInvest?.IntelDocuments != null && IntelInvest != null && !IntelInvest.IntelDocuments.Exists(s => s.Equals(sel)))
                    {
                        IntelInvest?.IntelDocuments?.Add(sel);
                    }

                }

                await _intelDocumentRef.Refresh();
                IsDialogIntelDocumentsVisible = false;
                break;
            case "collect":
                var selectedBaseIntelRef = await _baseIntelRef?.GetSelectedRecords();
                foreach (var sel in selectedBaseIntelRef)
                {
                    if (IntelInvest?.EvidenceCollected != null && IntelInvest != null && !IntelInvest.EvidenceCollected.Exists(s => s.Equals(sel)))
                    {
                        IntelInvest?.EvidenceCollected?.Add(sel);
                    }

                }

                await _baseIntelRef.Refresh();
                IsDialogBaseLineVisible = false;
                break;
        }
        StateHasChanged();
    }

    void CancelDialog()
    {
        IsDialogVisible = false;
        IsDialogIntelDocumentsVisible = false;
        IsDialogBaseLineVisible = false;
    }


    void OpenDialog(string dialog)
    {
        switch (dialog)
        {
            case "person":
                IsDialogVisible = true;
                break;
            case "intel":
                IsDialogIntelDocumentsVisible = true;
                break;
            case "collect":
                IsDialogBaseLineVisible = true;
                break;
        }

    }
    protected override async Task OnInitializedAsync()
    {
        IntelInvest ??= new IntelInvestigationFile();
        if (Update)
        {
            if (IntelInvest.ExpertOpinions != null) ExpertOpinionsList = IntelInvest.ExpertOpinions;
        }

        _personOfInterests = (List<PersonOfInterest>)await ServicePersonIntelService.GetAll();
        _intelDocuments = (List<IntelDocument>)await IntelService.GetAll();
        _evidenceCollected = (List<BaseIntel>)await GlobalService.GetAll();
    }



    private async Task Cancel(MouseEventArgs args)
    {
        await OnFileInvestChanged.InvokeAsync();
    }
    private async Task SubmitForm()
    {
        IntelInvest.ShortContent = IntelInvest.Description;
        IntelInvest.ExpertOpinions = ExpertOpinionsList;
        
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            if (Update)
            {
                await IntelInvestigationFileService.Update(IntelInvest);
            }
            else
            {
                await IntelInvestigationFileService.Add(IntelInvest);
            }

        }

        await OnFileInvestChanged.InvokeAsync();
       
        
    }
    protected void Changed()
    {
        StateHasChanged();
    }
    private Task DeletePersonOfInterests(MouseEventArgs args, PersonOfInterest? context)
    {
        if (context != null) IntelInvest?.PersonOfInterests?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }




    private Task DeleteEvidenceCollected(MouseEventArgs args, BaseIntel? context)
    {
        if (context != null) IntelInvest?.EvidenceCollected?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task DeleteIntelDocuments(MouseEventArgs args, IntelDocument? context)
    {
        if (context != null) IntelInvest?.IntelDocuments?.Remove(context);
        StateHasChanged();
        return Task.CompletedTask;
    }
}