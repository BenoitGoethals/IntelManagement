@page "/overviewIntelInvestigationFile"
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Model
@using IntelVault.WebAccess.Components.Pages.common
@inject IIntelService<IntelInvestigationFile> Service
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    switch (_flag)
    {
        case Crud.List:
            <SearchBar TextButton="Search CaseNumber" SearchText="@SText" Onchange="LoadItemsSearchText"></SearchBar>
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount=4 TotalItemsCount="@Count" ItemClick="Click">
            </SfPager>

            <SfGrid DataSource="@_items" @ref="Grid">
                <GridColumns>
                    <GridColumn Width="50">
                        <Template>
                            @{
                                var ticket = (context as IntelInvestigationFile);
                            }
                            <SfButton @ref="_editBtn" @onclick="@((args) => Edit(args, ticket))" IsToggle="true" IsPrimary="true">Edit</SfButton>
                            <SfButton @ref="_deleteBtn" @onclick="@((args) => Delete(args, ticket))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(IntelInvestigationFile.CaseNumber) HeaderText="CaseNumber" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelInvestigationFile.StartedDateTimeDate) HeaderText="StartedDateTimeDate" TextAlign="@TextAlign.Left" Type="ColumnType.Date" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelInvestigationFile.InvestigationStatus) HeaderText="InvestigationStatus" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelInvestigationFile.Description) HeaderText="Description" TextAlign="@TextAlign.Left" Width="65"></GridColumn>

                </GridColumns>
            </SfGrid>

            <div class="btn-sm">
                <SfButton IsToggle="true" IsPrimary="true" @onclick="@AddIntelInvestigationFile">Add</SfButton>
            </div>
            break;
        case Crud.Add:
            <IntelInvestigationView OnFileInvestChanged="IntelChanged"></IntelInvestigationView>
            break;
        case Crud.Update:
            <IntelInvestigationView IntelInvest="Intel" OnFileInvestChanged="IntelChanged" Update="true"></IntelInvestigationView>
            break;
    }


    @code {
    private Crud _flag = Crud.List;

    private SfButton? _editBtn;
    private SfButton? _deleteBtn;
    private List<IntelInvestigationFile?>? _items;
    public required string SText { get; set; }
    public int SkipValue;
    public required SfGrid<IntelInvestigationFile> Grid { get; set; }
    public int TakeValue = 6;

    public int Count { get; set; }
    public required SfPager Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    public void AddIntelInvestigationFile()
    {
        _flag = Crud.Add;

    }

    private Task Edit(MouseEventArgs args, IntelInvestigationFile? ticket)
    {

        Intel = ticket;
        _flag = Crud.Update;
        return Task.CompletedTask;
    }

    public IntelInvestigationFile? Intel { get; set; }

    private async Task Delete(MouseEventArgs args, IntelInvestigationFile? ticket)
    {
        await Service.Delete(ticket);
        await IntelChanged();
    }

    protected async Task IntelChanged()
    {
        _flag = Crud.List;
        await LoadItems();
        StateHasChanged();

    }
    private async Task LoadItems()
    {
        Count = (int)await Service.Count();
        _items = (await Service.GetAll(SkipValue, TakeValue, nameof(IntelInvestigationFile.CaseNumber), SText)).ToList();

    }

    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    private async Task LoadItemsSearchText(string text)
    {
        SText = text;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }
}
}
