@using IntelVault.WebAccess.Components.Pages.OpenSource
@using IntelVault.WebAccess.Components.Pages.common
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using IntelVault.ApplicationCore.Model
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Services
@using IntelVault.Infrastructure.repos
@using Microsoft.AspNetCore.Authorization
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<IntelInvestigationFile> Logger
@inject IIntelService<PersonOfInterest> ServicePersonIntelService
@inject IGlobalService GlobalService
@attribute [Authorize(Roles = "ADMIN")]

<SfDialog @bind-Visible="@IsDialogVisiblePerson" ID="GridPersonOfInterestsGrid" MinHeight="500px" Height="500px" Width="700px">
    <DialogTemplates>
        <Content>
            <SearchBar TextButton="Search Name" SearchText="@SText" Onchange="LoadItemsSearchText"></SearchBar>
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount="4" TotalItemsCount="@Count"  ItemClick="Click">
            </SfPager>
            <SfGrid @ref="GridPersonOfInterests" DataSource="@_personOfInterests" TValue="PersonOfInterest?">
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridPageSettings PageSize="6"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(PersonOfInterest.Name) HeaderText="HumIntType" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(PersonOfInterest.PoliticalGroup) HeaderText="PoliticalGroup" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(PersonOfInterest.Nationality) HeaderText="Nationality" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
               </SfGrid>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="false" @onclick="SelectPerson" />
        <DialogButton Content="Cancel" OnClick="@CancelDialog" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter]
    public EventCallback<List<PersonOfInterest?>> Selected { get; set; }
    [Parameter]
    public bool IsDialogVisiblePerson { get; set; } = false;
    public required SfPager Page { get; set; }
    private int SkipValue;
    private int TakeValue = 6;
    private int Count { get; set; }
    private  string SText { get; set; }
    private  SfGrid<PersonOfInterest?>? GridPersonOfInterests { get; set; }
    
    private List<PersonOfInterest?>? _personOfInterests;


    private async Task LoadItemsSearchText(string text)
    {
        SText = text;
        await LoadItems();
        await GridPersonOfInterests?.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }
    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        if (GridPersonOfInterests != null) await GridPersonOfInterests.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    private async Task LoadItems()
    {
        Count = (int)await ServicePersonIntelService.Count();
        _personOfInterests = (await ServicePersonIntelService.GetAll(SkipValue, TakeValue, nameof(PersonOfInterest.Name), SText)).ToList();

    }
    void CancelDialog()
    {
        IsDialogVisiblePerson = false;
        Selected.InvokeAsync(new List<PersonOfInterest?>());

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();

    }
   

    private async Task SelectPerson()
    {
        var selectedRecords = await GridPersonOfInterests?.GetSelectedRecordsAsync();
        if (selectedRecords != null) await Selected.InvokeAsync(selectedRecords);
        IsDialogVisiblePerson = false;
        StateHasChanged();
    }

}
