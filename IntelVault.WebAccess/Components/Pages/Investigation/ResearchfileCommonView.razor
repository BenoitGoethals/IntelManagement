@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Common
@using IntelVault.ApplicationCore.Model
@rendermode InteractiveServer
<style>
    .multiline {
        margin-top: 60px;
        width: 20%;
    }
</style>
<EditForm Model="@IntelInvest" OnValidSubmit="Submit" FormName="AddCommon">
    <AntiforgeryToken />
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <div class="form-row">
        <div class="form-group col-md-3">
            <SfTextBox @bind-Value="IntelInvest.CaseNumber" Placeholder="Case Number" class="form-control" />
            <ValidationMessage For="() => IntelInvest.CaseNumber" />
        </div>
        <div class="form-group col-md-6">
         
            <SfTextBox @bind-Value="IntelInvest.Description" Multiline="true" Placeholder="Description" class="form-control" />
            <ValidationMessage For="() => IntelInvest.Description" />
        </div>

        <div class="form-group col-md-2">
            <SfDateTimePicker TValue="DateTime?" Placeholder="Started DateTimeDate" Value="@IntelInvest.StartedDateTimeDate" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
        </div>
        
        <div class="form-group col-md-2">
            <SfDateTimePicker TValue="DateTime?" Placeholder="Ended DateTimeDate" Value="@IntelInvest.EndedDateTimeDate" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
        </div>


        <div class="form-group col-md-3">
            <SfTextBox @bind-Value="IntelInvest.InvestigatorName" Placeholder="Name" class="form-control" />
            <ValidationMessage For="() => IntelInvest.InvestigatorName" />
        </div>
        <div class="form-group col-md-3">
            <SfTextBox @bind-Value="IntelInvest.InvestigatorBadgeNumber" Placeholder="Alias" class="form-control" />
            <ValidationMessage For="() => IntelInvest.InvestigatorBadgeNumber" />
        </div>
        <div class="form-group col-md-3">
            <SfTextBox @bind-Value="IntelInvest.InvestigatorNote" Placeholder="Name" class="form-control" />
            <ValidationMessage For="() => IntelInvest.InvestigatorNote" />
        </div>

    
       
        <div class="form-group col-md-6">
            <MatButton Raised="true" type="submit">Add</MatButton>
        </div>

        <ValidationSummary />
    </div>
</EditForm>
<div class="form-group col-md-6">
    <SfButton @ref="_cancelBtn" CssClass="btn btn-primary" @onclick="@(Cancel)" IsToggle="true" IsPrimary="false">Cancel</SfButton>
</div>

@code {
    [Parameter]
    public EventCallback OnFileInvestChanged { get; set; }
   
   [Parameter]
    public IntelInvestigationFile? IntelInvest { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;

  


    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;
    }

    private SfButton? _cancelBtn;

    private async Task Cancel(MouseEventArgs args)
    {
        await OnFileInvestChanged.InvokeAsync();
    }


    private async Task Submit()
    {

    }
}

