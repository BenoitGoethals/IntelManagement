@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using IntelVault.ApplicationCore.Model
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Services
@using IntelVault.Infrastructure.repos
@using Microsoft.AspNetCore.Authorization
@using IntelVault.WebAccess.Components.Pages.common
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<IntelInvestigationFile> Logger

@inject IGlobalService GlobalService
@inject IDocumentService IntelService
@attribute [Authorize(Roles = "ADMIN")]
@using IntelVault.ApplicationCore.Model
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType

<SfDialog @bind-Visible="@IsDialogVisibleIntelDocument" MinHeight="500px" Height="500px" Width="700px" ID="GridIntelDocuments">
    <DialogTemplates>
        <Content>
            <SearchBar TextButton="Search  Name" SearchText="@SText" Onchange="LoadItemsSearchText"></SearchBar>
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount="4" TotalItemsCount="@Count" ItemClick="Click">
            </SfPager>
            <SfGrid @ref="IntelDocumentRef" DataSource="@_intelDocuments" TValue="IntelDocument?">
                <GridSelectionSettings Type="SelectionType.Multiple"></GridSelectionSettings>
                <GridEvents RowSelected="RowSelectHandler" TValue="IntelDocument?"></GridEvents>
                <GridPageSettings PageSize="6"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(IntelDocument.IntelType) HeaderText="TypeIntel" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.DocumentType) HeaderText="DocumentType" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.Description) HeaderText="SelectedListItem" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(IntelDocument.TimeCreated) HeaderText="TimeCreated" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>

            </SfGrid>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="false" @onclick="SelectDocument" Disabled="!IsSelected" />
        <DialogButton Content="Cancel" OnClick="@CancelDialog" />
    </DialogButtons>
</SfDialog>
@code
{
    [Parameter]
    public EventCallback<List<IntelDocument?>> Selected { get; set; }
    [Parameter]
    public bool IsDialogVisibleIntelDocument { get; set; } = false;
    public required SfPager Page { get; set; }
    public int SkipValue;
    public int TakeValue = 6;
    public int Count { get; set; }
    public required string SText { get; set; }
    private List<IntelDocument?>? _intelDocuments;
    public required SfGrid<IntelDocument>? IntelDocumentRef { get; set; }
    private bool IsSelected { get; set; } = false;



    private async Task LoadItemsSearchText(string text)
    {
        SText = text;
        await LoadItems();
        IntelDocumentRef?.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }
    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        if (IntelDocumentRef != null) await IntelDocumentRef.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    private async Task LoadItems()
    {
        Count = (int)await IntelService.Count();
        _intelDocuments = (await IntelService.GetAll(SkipValue, TakeValue, nameof(IntelDocument.Description), SText)).ToList();

    }
    void CancelDialog()
    {
        IsSelected = false;
        IsDialogVisibleIntelDocument = false;
        Selected.InvokeAsync(new List<IntelDocument?>());
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task SelectDocument()
    {
        var selectedRecords = await IntelDocumentRef?.GetSelectedRecordsAsync();
        if (selectedRecords != null) await Selected.InvokeAsync(selectedRecords);
        IsDialogVisibleIntelDocument = false;
        IsSelected = false;
        StateHasChanged();
    }

    public void RowSelectHandler(RowSelectEventArgs<IntelDocument?> args)
    {
        IsSelected = IntelDocumentRef?.GetSelectedRecordsAsync().ConfigureAwait(ConfigureAwaitOptions.ContinueOnCapturedContext).GetAwaiter().GetResult().Count > 0;
    }
}
