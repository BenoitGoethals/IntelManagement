<h3>Add Human Intel</h3>
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Model
@using IntelVault.ApplicationCore.Services
@using IntelVault.WebAccess.Components.Pages.common
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<HumInt> Logger
@inject IIntelService<HumInt> Service;

@if (HumIntIntel != null)
{
    <EditForm Model="@HumIntIntel" OnValidSubmit="Submit" FormName="AddHumIntIntel">
        <AntiforgeryToken />
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <div class="form-row">
            <div class="form-group col-md-6">
                <label class="form-label">Name</label>

                <SfDropDownList TValue="HumIntType" @bind-Value="@HumIntTypeSelect" Width="300px" TItem="string" class="form-control" Placeholder="Select a Type Humint" DataSource="@HumIntTypeItems"></SfDropDownList>

                <ValidationMessage For="() => HumIntIntel.HumIntType"></ValidationMessage>
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Reliability Credibility</label>
                <SfTextBox @bind-Value="HumIntIntel.ReliabilityCredibility" Placeholder="SourceName" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ReliabilityCredibility" />
            </div>
            <div class="form-group col-md-6">
                <label class="form-label">Contact Name</label>
                <SfTextBox @bind-Value="HumIntIntel.ContactName" Placeholder="IncidentDescription" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ContactName" />
            </div>
            <div class="form-group col-md-6">
                <label class="form-label">Contact Email</label>
                <SfTextBox @bind-Value="HumIntIntel.ContactEmail" Placeholder="ContactEmail" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ContactEmail" />
            </div>
            <div class="form-group col-md-6">
                <label class="form-label">Operational Status</label>
                <SfTextBox @bind-Value="HumIntIntel.OperationalStatus" Placeholder="OperationalStatus" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.OperationalStatus" />
            </div>
            <div class="form-group col-md-6">
                <label class="form-label">Access Level</label>
                <SfTextBox @bind-Value="HumIntIntel.AccessLevel" Placeholder="AccessLevel" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.AccessLevel" />
            </div>
            <div class="form-group col-md-6">
                <label class="form-label">Accuracy Of Details</label>
                <SfTextBox @bind-Value="HumIntIntel.AccuracyOfDetails" Placeholder="AccuracyOfDetails" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.AccuracyOfDetails" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Assessment And Analysis</label>
                <SfTextBox @bind-Value="HumIntIntel.AssessmentAndAnalysis" Placeholder="AssessmentAndAnalysis" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.AssessmentAndAnalysis" />
            </div>



            <div class="form-group col-md-6">
                <label class="form-label">Classification Handling Instructions</label>
                <SfTextBox @bind-Value="HumIntIntel.ClassificationHandlingInstructions" Placeholder="ClassificationHandlingInstructions" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ClassificationHandlingInstructions" />
            </div>



            <div class="form-group col-md-6">
                <label class="form-label">Contact PhoneNumber</label>
                <SfTextBox @bind-Value="HumIntIntel.ContactPhoneNumber" Placeholder="ContactPhoneNumber" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ContactPhoneNumber" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">Contact Title</label>
                <SfTextBox @bind-Value="HumIntIntel.ContactTitle" Placeholder="ContactTitle" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ContactTitle" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">Context Background</label>
                <SfTextBox @bind-Value="HumIntIntel.ContextBackground" Placeholder="ContextBackground" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.ContextBackground" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">OperationalStatus</label>
                <SfTextBox @bind-Value="HumIntIntel.OperationalStatus" Placeholder="OperationalStatus" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.OperationalStatus" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Time Location</label>
                <SfTextBox @bind-Value="HumIntIntel.TimeLocation" Placeholder="TimeLocation" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.TimeLocation" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Source Affiliation</label>
                <SfTextBox @bind-Value="HumIntIntel.SourceAffiliation" Placeholder="SourceAffiliation" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.SourceAffiliation" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">Source Information</label>
                <SfTextBox @bind-Value="HumIntIntel.SourceInformation" Placeholder="SourceInformation" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.SourceInformation" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Source Name</label>
                <SfTextBox @bind-Value="HumIntIntel.SourceName" Placeholder="SourceName" class="form-control" />
                <ValidationMessage For="() => HumIntIntel.SourceName" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Last Contact Date</label>
                <SfDateTimePicker TValue="DateTime?" @bind-Value="@HumIntIntel.LastContactDate" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
                <ValidationMessage For="() => HumIntIntel.LastContactDate" />
            </div>

            <SfAccordion>
                <AccordionItems>
                    <AccordionItem>
                        <HeaderTemplate>
                            <div>Intelligence Details</div>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <ViewListItem Description="Intelligence Details" Items="@HumIntIntel.IntelligenceDetails"></ViewListItem>
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
        </div>
        <div class="form-group col-md-6">
            <MatButton Raised="true" type="submit">Add</MatButton>
        </div>
        <ValidationSummary />
    </EditForm>
    <div class="form-group col-md-6">
        <SfButton @ref="_cancelBtn" CssClass="btn btn-primary" @onclick="@(Cancel)" IsToggle="true" IsPrimary="false">Cancel</SfButton>
    </div>
}
@code {
    [Parameter]
    public EventCallback OnIntelChanged { get; set; }

    public HumInt? HumIntIntel { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;

    public HumIntType HumIntTypeSelect { get; set; }
    public string[] HumIntTypeItems = Enum.GetNames(typeof(HumIntType));

    protected override Task OnInitializedAsync()
    {
        HumIntIntel = new HumInt();
        return Task.CompletedTask;
    }

    private SfButton? _cancelBtn;

    private async Task Cancel(MouseEventArgs args)
    {
        await OnIntelChanged.InvokeAsync();
    }


    private async Task Submit()
    {
        if (HumIntIntel != null)
        {
            HumIntIntel.HumIntType = HumIntTypeSelect;
            if (await _fluentValidationValidator!.ValidateAsync())
            {
                Logger.LogInformation("Id = {Id}", HumIntIntel.Id);
                Service?.Add(HumIntIntel);
                await OnIntelChanged.InvokeAsync();
            }
        }
    }



}