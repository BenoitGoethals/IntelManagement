@page "/GeneralIntelView"
@using IntelVault.ApplicationCore.Services
@using IntelVault.ApplicationCore.Model
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.WebAccess.Components.Pages.common
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IIntelService<GeneralIntel> Service;
<PageTitle>General Intel</PageTitle>
<h3>General Intel</h3>


@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    switch (_flag)
    {
        case Crud.List:
            <SearchBar TextButton="Search Informant Name" SearchText="@SText" Onchange="LoadItemsSearchText"></SearchBar>
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount=4 TotalItemsCount="@Count"  ItemClick="Click">
            </SfPager>

            <SfGrid DataSource="@Items" @ref="Grid">
                <GridColumns>
                    <GridColumn Width="50">
                        <Template>
                            @{
                                var ticket = (context as GeneralIntel);
                            }
                            <SfButton @ref="_editBtn" @onclick="@((args) => Edit(args, ticket))" IsToggle="true" IsPrimary="true">Edit</SfButton>
                            <SfButton @ref="_deleteBtn" @onclick="@((args) => Delete(args, ticket))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(GeneralIntel.Name) HeaderText="Name" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(GeneralIntel.ReportDate) HeaderText="ReportDate" TextAlign="@TextAlign.Left" Type="ColumnType.Date" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(GeneralIntel.Findings) HeaderText="Findings" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(GeneralIntel.HumanSource) HeaderText="HumanSource" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
            </SfGrid>

            <div class="btn-sm">
                <SfButton @onclick="AddPerson" IsPrimary="true" Content="Add General Intel"></SfButton>
            </div>
            break;
        case Crud.Add:
            <AddGeneralIntelView OnIntelChanged="IntelChanged"></AddGeneralIntelView>
            break;
        case Crud.Update:
            <EditGeneralIntelView GeneralIntelItem="Intel" OnIntelChanged="IntelChanged"></EditGeneralIntelView>
            break;
    }
}


@code {
    private GeneralIntel? Intel { get; set; } = new GeneralIntel();

    private Crud _flag = Crud.List;

    private SfButton? _editBtn;
    private SfButton? _deleteBtn;
    public List<GeneralIntel?>? Items { get; set; }
    public int SkipValue;
    public required SfGrid<GeneralIntel> Grid { get; set; }
    public int TakeValue = 6;
    public int Count { get; set; }
    public required SfPager Page { get; set; }
    public string? SText { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        Count = (int)await Service.Count();
         Items = (await Service.GetAll(SkipValue, TakeValue, nameof(GeneralIntel.Name), SText)).ToList();
    }

    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    private async Task LoadItemsSearchText(string text)
    {
        SText = text;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    protected async Task IntelChanged()
    {
        _flag = Crud.List;
        await LoadItems();
        StateHasChanged();
    }

    public void AddPerson()
    {
        _flag = Crud.Add;
        StateHasChanged();
    }



    private async Task Delete(MouseEventArgs args, GeneralIntel? context)
    {
        Intel = context;
        await Service.Delete(context);
        await IntelChanged();
    }

    private Task Edit(MouseEventArgs args, GeneralIntel? context)
    {
        Intel = context;
        _flag = Crud.Update;
        return Task.CompletedTask;
    }

    

}
