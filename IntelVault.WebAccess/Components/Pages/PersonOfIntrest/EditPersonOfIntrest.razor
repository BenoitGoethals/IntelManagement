@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Common
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Model
@using IntelVault.ApplicationCore.Services
@using IntelVault.WebAccess.Components.Pages.common
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ILogger<PersonOfInterest> Logger
@inject IIntelService<PersonOfInterest> Service;
@inject ServiceCountry CountryService;
@if (Interest != null)
{
    <EditForm Model="@Interest" OnValidSubmit="Submit" FormName="AddPersonOfIntrest">
        <AntiforgeryToken />
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <div class="form-row">
            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Name" Placeholder="Name" class="form-control" />
                <ValidationMessage For="() => Interest.Name" />
            </div>
            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Address" Placeholder="Address" class="form-control" />
                <ValidationMessage For="() => Interest.Address" />
            </div>

            <div class="form-group col-md-6">

                <SfDateTimePicker TValue="DateTime?" Value="@Interest.DateOfBirth" Format="dd-MMM-yy HH:mm"></SfDateTimePicker>
            </div>

            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Affiliations" Placeholder="Name" class="form-control" />
                <ValidationMessage For="() => Interest.Affiliations" />
            </div>
            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Alias" Placeholder="Alias" class="form-control" />
                <ValidationMessage For="() => Interest.Alias" />
            </div>
            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.CriminalRecord" Placeholder="Name" class="form-control" />
                <ValidationMessage For="() => Interest.CriminalRecord" />
            </div>

            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Email" Placeholder="Email" class="form-control" />
                <ValidationMessage For="() => Interest.Email" />
            </div>

            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.EyeColor" Placeholder="EyeColor" class="form-control" />
                <ValidationMessage For="() => Interest.EyeColor" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">HairColor</label>
                <SfTextBox @bind-Value="Interest.HairColor" Placeholder="HairColor" class="form-control" />
                <ValidationMessage For="() => Interest.HairColor" />
            </div>


            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.Height" Placeholder="Height" class="form-control" />
                <ValidationMessage For="() => Interest.Height" />
            </div>


            <div class="form-group col-md-6">
                <SfDropDownList @bind-Value="@_nationality" TValue="Country" TItem="Country" Width="300px" class="form-control" Placeholder="Select a Nationality" DataSource="@_countries">
                    <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>

            <div class="form-group col-md-6">
                <SfTextBox @bind-Value="Interest.PhoneNumber" Placeholder="PhoneNumber" class="form-control" />
                <ValidationMessage For="() => Interest.PhoneNumber" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">Thread Level</label>
                <select @bind="@_threadlevel" class="form-select-sm">
                    <option>5</option>
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                </select>
                <ValidationMessage For="() => _threadlevel" />
            </div>



            <div class="form-group col-md-6">
              
                <SfTextBox @bind-Value="Interest.Relationships" Placeholder="Relationships" class="form-control" />
                <ValidationMessage For="() => Interest.Relationships" />
            </div>

            <div class="form-group col-md-6">
              
                <SfTextBox @bind-Value="Interest.PoliticalGroup" Placeholder="Political Group" class="form-control" />
                <ValidationMessage For="() => Interest.PoliticalGroup" />
            </div>

            <div class="form-group col-md-6">
               
                <SfTextBox @bind-Value="Interest.SuspiciousActivities" Placeholder="Suspicious Activities" class="form-control" />
                <ValidationMessage For="() => Interest.SuspiciousActivities" />
            </div>

            <div class="form-group col-md-6">
                <PhotoListItem Items="@Interest.Pictures" OnListChanged="OnPersonChanged"></PhotoListItem>
            </div>
    
            <div class="form-group col-md-6">
                <MatButton Raised="true" type="submit">Update</MatButton>
            </div>
            <ValidationSummary />
        </div>
    </EditForm>
    <div class="form-group col-md-6">
        <SfButton @ref="_cancelBtn" CssClass="btn btn-primary" @onclick="@(Cancel)" IsToggle="true" IsPrimary="false">Cancel</SfButton>
    </div>
}
@code {
    [Parameter]
    public EventCallback OnPersonChanged { get; set; }

    [Parameter]
    public PersonOfInterest? Interest { get; set; }
    private FluentValidationValidator? _fluentValidationValidator;

    string[] _value1Items = { "1", "2", "3", "4", "5" };

    private Country? _nationality;

    List<Country>? _countries;
    
    protected override Task OnInitializedAsync()
    {
        _countries=CountryService.Countries;
        var tempNat = _countries?.Find(c => c.Code != null && c.Code.Equals(Interest?.Nationality));
        _nationality = tempNat ?? new Country() { Name = "Belgium", Code = "BE" };
        _threadlevel = Interest?.ThreatLevel.ToString();
       return Task.CompletedTask;
    }

    private SfButton? _cancelBtn;

    private async Task Cancel(MouseEventArgs args)
    {
        await OnPersonChanged.InvokeAsync();
    }

    private string? _threadlevel = "5";
    private async Task Submit()
    {
        if (Interest != null)
        {
            Interest.ThreatLevel = Convert.ToInt16(_threadlevel);
            Interest.Nationality = _nationality?.Code;
            if (await _fluentValidationValidator!.ValidateAsync())
            {
                Logger.LogInformation("Update Id = {Id}", Interest?.Id);
                Service?.Update(Interest);
                await OnPersonChanged.InvokeAsync();
               
            }
        }
    }


}