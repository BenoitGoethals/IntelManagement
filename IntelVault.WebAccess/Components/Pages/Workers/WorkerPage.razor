@page "/WorkerPage"
@using IntelVault.Infrastructure.Workers
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Authorization
@using IntelVault.WebAccess.Components.Pages.common
@rendermode InteractiveServer
@inject IWorkersGrpc Worker;
@* @attribute [Authorize(Roles = "ADMIN")] *@
<Menubar></Menubar>
<div>

    <EditForm OnValidSubmit="Add" Model="@QJobAdd">
        <FluentValidationValidator @ref="_fluentValidationValidator" />
        <AntiforgeryToken />
        <div class="form-row">

            <div class="form-group col-md-6">
                <label class="form-label">Name</label>
                <SfTextBox @bind-Value="QJobAdd.Name" Placeholder="Name" class="form-control" />
                <ValidationMessage For="() => QJobAdd.Name" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">Group</label>
                <SfTextBox @bind-Value="QJobAdd.Group" Placeholder="Group" class="form-control" />
                <ValidationMessage For="() => QJobAdd.Group" />
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">OpenSource Type :</label>
                <SfDropDownList class="form-control" TValue="OpenSourceType" @bind-Value="QJobAdd.OpenSourceType" Width="300px" TItem="string" Placeholder="Select a Type " DataSource="@OpenSourceTypes"></SfDropDownList>
            </div>


            <div class="form-group col-md-6">
                <label class="form-label">Description</label>
                <SfTextBox @bind-Value="QJobAdd.Description" Placeholder="Description" class="form-control" />
                <ValidationMessage For="() => QJobAdd.Description" />
            </div>

            <div class="form-group col-md-6">
                <label class="form-label">URL</label>
                <SfTextBox @bind-Value="QJobAdd.Url" Placeholder="Description" class="form-control" />
                <ValidationMessage For="() => QJobAdd.Url" />
            </div>
            <SfCard>
                <div class="form-group col-md-6">
                    <label class="form-label">OpenSource Type :</label>
                    <SfCheckBox Label="CronTab" @bind-Checked="@IsCheckCronTab"></SfCheckBox>
                </div>
                @if (IsCheckCronTab)
                {
                    <div class="form-group col-md-6">
                        <label class="form-label">Cron Tab</label>
                        <SfTextBox @bind-Value="QJobAdd.CronTab" Placeholder="Crontab" class="form-control" />
                        <ValidationMessage For="() => QJobAdd.CronTab" />
                    </div>
                }
                else
                {
                    <div class="form-group col-md-6">
                        <label class="form-label">Interval</label>
                        <SfNumericTextBox @bind-Value="QJobAdd.Interval" Min="0" Placeholder="Interval" class="form-control" />
                        <ValidationMessage For="() => QJobAdd.Interval" />
                    </div>
                    <div class="form-group col-md-6">
                        <label class="form-label">Start Date</label>
                        <SfDateTimePicker TValue="DateTime?" @bind-Value="@QJobAdd.StartDate" Format="dd-MMM-yy HH:mm" Min="DateTime.Now"></SfDateTimePicker>
                        <ValidationMessage For="() => QJobAdd.StartDate" />
                    </div>
                    <div class="form-group col-md-6">
                        <label class="form-label">End Date</label>
                        <SfDateTimePicker TValue="DateTime?" @bind-Value="@QJobAdd.EndDate" Format="dd-MMM-yy HH:mm" Min="DateTime.Now"></SfDateTimePicker>
                        <ValidationMessage For="() => QJobAdd.EndDate" />
                    </div>
                }
            </SfCard>




            <div class="form-group col-md-6">
                <label class="form-label">Keywords</label>
                <SfTextBox @bind-Value="@NewKeyword.Text" Placeholder="Enter keyword"></SfTextBox>
                <SfButton OnClick="AddKeyword" HtmlAttributes="htmlAttr" IsPrimary="false" IsToggle="false">Add</SfButton>
                <SfListView Id="List"
                            DataSource="@_keywords"
                            HeaderTitle="keywords"
                            ShowHeader="true"
                            CssClass="e-list-template"
                            Width="350"
                            SortOrder="Syncfusion.Blazor.Lists.SortOrder.Ascending">
                    <ListViewFieldSettings TValue="DataModel" Id="Id" Text="Text"></ListViewFieldSettings>
                    <ListViewTemplates TValue="DataModel">
                        <Template Context="contextKey">
                            @{
                                DataModel dataModel = contextKey as DataModel;
                                <div class="keyword-item">
                                    <span>@dataModel.Text</span>
                                    <SfButton @ref="_deleteBtn" HtmlAttributes="htmlAttr" @onclick="@((args) => RemoveKeyword(args,@dataModel))" IsPrimary="false">Delete</SfButton>


                                </div>
                            }

                        </Template>

                    </ListViewTemplates>
                </SfListView>
            </div>
            <br />
            <SfButton Type="submit" Content="Add Job" IsPrimary="true"></SfButton>
        </div>
    </EditForm>
    <br />
    <br />
</div>
@if (_observableCollection == null)
{
    <h1>Loading</h1>
}
else
{

    <div>
        Bacgound Worker :
        @if (_working)
        {
            <h6>Is running</h6>
        }
        else
        {
            <h6>Not running</h6>
        }

    </div>

    <br />
    <SfGrid DataSource="@_observableCollection">
        <GridTemplates>
            <RowTemplate Context="emp">
                @{
                    var job = (emp as QJobs);
                    // <td class="photo">
                    //     <img src="@($" scripts/Images/Employees/{employee.EmployeeID}.png")" alt="@employee.EmployeeID" />
                    // </td>
                    <td class="details">
                        <table class="CardTable" cellpadding="3" cellspacing="2">
                            <colgroup>
                                <col width="10%">
                                <col width="30%">
                                <col width="10%">
                                <col width="10%">
                                <col width="30%">
                            </colgroup>
                            <tbody>
                                <tr>
                                    <td class="CardHeader">Name </td>
                                    <td>@job.Name </td>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <SfButton Content="Resume" @onclick="@((args) => Start(args, job))" IsPrimary="true"></SfButton>
                                        &nbsp;<SfButton Content="pauze" @onclick="@((args) => Stop(args, job))" IsPrimary="true"></SfButton>
                                        &nbsp;<SfButton Content="Delete" @onclick="@((args) => Delete(args, job))" IsPrimary="true"></SfButton>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="CardHeader">Description</td>
                                    <td>@job.Description </td>
                                </tr>
                                <tr>
                                    <td class="CardHeader">
                                        Title
                                    </td>
                                    <td>
                                        @job.Name
                                    </td>
                                </tr>
                                <tr>
                                    <td class="CardHeader">
                                        Start DTG
                                    </td>
                                    <td>
                                        @job.StartDate
                                    </td>
                                </tr>
                                <tr>
                                    <td class="CardHeader">
                                        End DTG
                                    </td>
                                    <td>
                                        @job.EndDate
                                    </td>
                                </tr>
                                <tr>
                                    <td class="CardHeader">
                                        Next DTG
                                    </td>
                                    <td>
                                        @job.Next
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                }
            </RowTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn HeaderText="Job Running" Width="250" TextAlign="TextAlign.Left"> </GridColumn>

        </GridColumns>
    </SfGrid>

}


<style type="text/css" class="cssStyles">
    .photo img {
        width: 100px;
        height: 100px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }

    .e-listview.e-control {
        width: 400px;
    }

    .pic01 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/1.png");
    }

    .pic02 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/3.png");
    }

    .pic03 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/5.png");
    }

    .pic04 {
        background-image: url("https://ej2.syncfusion.com/demos/src/grid/images/2.png");
    }

    #List .e-list-item:nth-child(1) .e-avatar {
        background-color: #039be5;
    }

    #List .e-list-item:nth-child(2) .e-avatar {
        background-color: #e91e63;
    }

    #List .e-list-item:nth-child(6) .e-avatar {
        background-color: #009688;
    }

    #List .e-list-item:nth-child(8) .e-avatar {
        background-color: #000088;
    }

    .keyword-item {
        display: flex;
        justify-content: space-between;
        padding: 5px;
        border-bottom: 1px solid #ddd;
    }

    .remove-btn {
        color: red;
        cursor: pointer;
    }

    .photo,
    .details {
        border-color: #e0e0e0;
        border-style: solid;
    }

    .photo {
        border-width: 1px 0px 0px 0px;
        text-align: center;
    }

    .details {
        border-width: 1px 0px 0px 0px;
        padding-left: 18px;
    }

    .e-bigger .details {
        padding-left: 25px;
    }

    .e-device .details {
        padding-left: 8px;
    }

    .details > table {
        width: 100%;
    }

    .CardHeader {
        font-weight: 600;
    }

    td {
        padding: 2px 2px 3px 4px;
    }
</style>


@code {
    public List<QJobs>? JobsList { get; private set; }
    private bool _working;

    private Dictionary<string, object> htmlAttr = new Dictionary<string, object>()
    {
        { "type", "button" }
    };
    private IList<QJobs>? _observableCollection;
    private SfButton? _deleteBtn;

    private QJobs QJobAdd { get; set; } = new QJobs();
    private FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        QJobAdd = new QJobs();
        JobsList = await Worker.GetJobs() as List<QJobs>;
        _working = await Worker.IsWorkerRunning();
        _observableCollection = await Worker.GetJobs();

    }

    public string[] OpenSourceTypes = Enum.GetNames(typeof(OpenSourceType));
    private async Task Start(MouseEventArgs args, QJobs? context)
    {
        await Worker.Start(context?.Name, context?.Group);
    }

    private async Task Delete(MouseEventArgs args, QJobs? context)
    {
        await Worker.Delete(context?.Name, context?.Group);

    }

    private async Task Stop(MouseEventArgs args, QJobs? context)
    {
        await Worker.Stop(context?.Name, context?.Group);
    }

    private void Callback()
    {
        throw new NotImplementedException();
    }

    private async Task Add()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            QJobAdd.Keywords = _keywords.Select(c => c?.Text).ToList();
            await Worker.MakeJob(QJobAdd);
        }

        await OnInitializedAsync();
        StateHasChanged();

    }

    private readonly List<DataModel?> _keywords = new List<DataModel?>();

    public DataModel? NewKeyword { get; set; } = new DataModel();

    void AddKeyword()
    {
        if (!string.IsNullOrWhiteSpace(NewKeyword?.Text))
        {
            _keywords.Add(NewKeyword);
            NewKeyword = new DataModel();
        }
    }

    void RemoveKeyword(MouseEventArgs args, DataModel keyword)
    {
        _keywords.Remove(keyword);

    }
    public class DataModel
    {
        public string? Id { get; set; }
        public string? Text { get; set; }

    }

    public bool IsCheckCronTab { get; set; }

}
