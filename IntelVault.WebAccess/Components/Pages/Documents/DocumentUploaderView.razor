@page "/DocumentUploaderView"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using IntelVault.WebAccess.Components.Pages.common
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations
@using Blazored.FluentValidation
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Model
@using IntelVault.ApplicationCore.Services
@using MongoDB.Bson
@inject IDocumentService Service;

@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group ">
        <SfGrid DataSource="@Items" AllowPaging="true" AllowReordering="true" AllowSorting=true Toolbar=@ToolbarItems @rendermode="InteractiveServer">
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridColumns>
                <GridColumn TextAlign="TextAlign.Right" Width="40">
                    <Template>
                        @{
                            var intel = (context as IntelDocument);
                            <div class="image">
                                <img src="@($"icons/{intel?.DocumentType.ToString()}.png")" alt="@intel?.DocumentType.ToString()" height="25" width="25" />
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(IntelDocument.Description) HeaderText="SelectedListItem" Width="520"></GridColumn>
                <GridColumn Field=@nameof(IntelDocument.DocumentType) HeaderText="Document Type" Width="70"></GridColumn>
                <GridColumn Field=@nameof(IntelDocument.TimeCreated) HeaderText=" TimeCreated" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div class="form-row">
        <EditForm Enhance Model="@_document" OnValidSubmit="@HandleValidSubmit">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label class="form-label">SelectedListItem</label>
                    <SfTextBox @bind-Value="@_document.Description"></SfTextBox>
                    <ValidationMessage For="() => _document.Description" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">Type Intel</label>
                    <SfDropDownList TValue="TypeIntel" @bind-Value="@TypeIntelChosen" Width="300px" TItem="string" class="form-control" Placeholder="Select a Type " DataSource="@TypeIntelItems"></SfDropDownList>
                </div>

                <div class="form-group ">
                    <label class="form-label">Long SelectedListItem</label>
                    <BigTextItem InputText="@_document.LongDescription" BindingValueChanged="OnLongDescriptionChanged"></BigTextItem>
                </div>

                <div class="form-group col-md-6">
                    <SfUploader AutoUpload="true" @ref="_uploadObj" Enabled="!string.IsNullOrEmpty(_document.LongDescription)" ShowProgressBar="true" ShowFileList="true"
                                 AllowedExtensions=".doc, .docx, .xls, .xlsx, .pdf">
                        <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
                    </SfUploader>
                </div>

                <div class="form-group col-md-6">
                     <SfButton IsPrimary="true" class="btn btn-primary" Disabled="string.IsNullOrEmpty(_document.Description) || NewItemDocuments?.Count==0">Submit</SfButton>
                </div>
            </div>
        </EditForm>
    </div>

}
@code {
    public List<string> ToolbarItems = new List<string>() { "Search" };
    SfUploader? _uploadObj;
    private List<IntelDocument?>? Items { get; set; }
    private List<IntelDocument?>? NewItemDocuments { get; set; } = new List<IntelDocument?>();
    public string[] InitSearch = new string[] { "SelectedListItem" };
    private FluentValidationValidator? _fluentValidationValidator;

    public TypeIntel TypeIntelChosen { get; set; }
    public string[] TypeIntelItems = Enum.GetNames(typeof(TypeIntel));


   private IntelDocument _document = new IntelDocument();

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = @"" + file.FileInfo.Name;
                using MemoryStream memoryStream = new MemoryStream();
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(memoryStream);
                var bytes = memoryStream.ToArray();
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);
                DocumentType documentType;
                switch (fileInfo.Extension.ToLower())
                {
                    case ".pdf":
                        documentType = DocumentType.PDF;
                        break;
                    case ".docx":
                        documentType = DocumentType.Docx;
                        break;
                    default:
                        documentType = DocumentType.Nothing;
                        break;
                }

                _document.Content = bytes;
                _document.DocumentType = documentType;
                _document.TimeCreated = DateTime.Now;
                _document.IntelType = TypeIntelChosen;
                NewItemDocuments?.Add(_document);
            }
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("Error");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Items = (await Service.GetAll()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (NewItemDocuments != null)
                foreach (var item in NewItemDocuments.Where(item => item != null))
                {
                    await Service.Store(item);
                  
                    Items?.Add(item);
                   
                }
            _document = new IntelDocument();
            NewItemDocuments?.Clear();
            StateHasChanged();
        //    NavigationManager.NavigateTo("DocumentUploaderView", true);

        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("Error");
        }
    }


    private Task OnLongDescriptionChanged(string arg)
    {
        _document.LongDescription = arg;
        return Task.CompletedTask;
    }

}