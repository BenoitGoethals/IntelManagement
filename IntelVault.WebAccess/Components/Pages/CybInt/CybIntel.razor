@page "/CybIntel"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using IntelVault.WebAccess.Components.Pages.common
@using IntelVault.ApplicationCore.Interfaces
@using IntelVault.ApplicationCore.Model

@inject IIntelService<CybInt> Service;

<PageTitle>Cyber Intel</PageTitle>

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (_flag == Crud.List)
    {
        <div class="grid">
            <SearchBar TextButton="Search  IncidentDescription" SearchText="@SText" Onchange="LoadItemsSerachText"></SearchBar>
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount=4 TotalItemsCount="@Count" ItemClick="Click">
            </SfPager>

            <SfGrid DataSource="@_items" @ref="Grid">
                <GridColumns>
                    <GridColumn Field=@nameof(CyberIntel.IncidentType) HeaderText="Name" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(CyberIntel.IncidentDescription) HeaderText="IncidentDescription" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(CyberIntel.CreatedDtg) HeaderText="ReportDate" Format="d" Type="ColumnType.Date" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Width="50">
                        <Template>
                            @{
                                var ticket = (context as CybInt);
                            }
                            <SfButton @ref="_editBtn" @onclick="@((args) => Edit(args, ticket))" IsToggle="true" IsPrimary="true">Edit</SfButton>
                            <SfButton @ref="_deleteBtn" @onclick="@((args) => Delete(args, ticket))" IsToggle="true" IsPrimary="true">Delete</SfButton>

                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
        <div class="btn-sm">
            <SfButton Content="Add" IsPrimary="true" @onclick="AddPerson"></SfButton>
        </div>
    }
    else if (_flag == Crud.Add)
    {
        <AddCyIbnt OnIntelChanged="IntelChanged"></AddCyIbnt>
    }
    else if (_flag == Crud.Update)
    {
        <EditCybInt CyberIntel="CyberIntel" OnIntelChanged="IntelChanged"></EditCybInt>
    }

}
@code {
    private SfButton? _editBtn;
    private SfButton? _deleteBtn;

    Crud _flag = Crud.List;
    public string SText { get; set; }
    List<CybInt?>? _items;
    public int SkipValue;
    public SfGrid<CybInt> Grid { get; set; }
    public int TakeValue = 6;
   
    public int Count { get; set; }
    public SfPager Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();

    }

    private async Task LoadItems()
    {
        Count = (int)await Service.Count();
        _items = (await Service.GetAll(SkipValue, TakeValue, nameof(CyberIntel.IncidentDescription), SText)).ToList();

    }

    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    private async Task LoadItemsSerachText(string text)
    {
        SText = text;
        await LoadItems();
        await Grid.Refresh();
        await Page.RefreshAsync();
        StateHasChanged();
    }

    protected async Task IntelChanged()
    {
        _flag = Crud.List;
        await LoadItems();
        StateHasChanged();
    }

    public void AddPerson()
    {
        _flag = Crud.Add;
        StateHasChanged();
    }


    private CybInt? CyberIntel { get; set; } = new CybInt();


    private async Task Delete(MouseEventArgs args, CybInt? context)
    {
        CyberIntel = context;
        await Service.Delete(CyberIntel);
        await IntelChanged();
    }

    private Task Edit(MouseEventArgs args, CybInt? context)
    {
        CyberIntel = context;
        _flag = Crud.Update;
        return Task.CompletedTask;
    }
}




