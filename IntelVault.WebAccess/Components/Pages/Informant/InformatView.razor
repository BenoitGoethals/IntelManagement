@page "/InformantView"
@using IntelVault.ApplicationCore.Services
@using IntelVault.ApplicationCore.Model
@using IntelVault.ApplicationCore.Interfaces
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IIntelService<Informant> Service;
<PageTitle>InformantView</PageTitle>

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    switch (_flag)
    {
        case Crud.List:
            <SfPager @ref="Page" PageSize="@TakeValue" NumericItemsCount=4 TotalItemsCount="@Count" ItemClick="Click">
            </SfPager>
           
            <SfGrid DataSource="@_items" @ref="Grid">
               
                <GridColumns>
                    <GridColumn Width="50">
                        <Template>
                            @{
                                var ticket = (context as Informant);
                            }
                            <SfButton @ref="_editBtn" @onclick="@((args) => Edit(args, ticket))" IsToggle="true" IsPrimary="true">Edit</SfButton>
                            <SfButton @ref="_deleteBtn" @onclick="@((args) => Delete(args, ticket))" IsToggle="true" IsPrimary="true">Delete</SfButton>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(Informant.InformantName) HeaderText="Name" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(Informant.IntelProvided) HeaderText="IntelProvided" TextAlign="@TextAlign.Left" Type="ColumnType.Date" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(Informant.ActiveStatus) HeaderText="ActiveStatus" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                    <GridColumn Field=@nameof(Informant.InformantRole) HeaderText="InformantRole" TextAlign="@TextAlign.Left" Width="65"></GridColumn>
                </GridColumns>
            </SfGrid>

            <div class="btn-sm">
                <SfButton IsPrimary="true" Content="Add Informant" @onclick="Callback"></SfButton>
            </div>
            break;
        case Crud.Add:
            <InformatEditView OnIntelChanged="IntelChanged"></InformatEditView>
            break;
        case Crud.Update:
            <InformatEditView OnIntelChanged="IntelChanged" Update="true" InformantTemp="_informant"></InformatEditView>
            break;
    }
}

@code {
    private SfButton? _editBtn;
    private SfButton? _deleteBtn;
    public int SkipValue;
    public SfGrid<Informant> Grid { get; set; }
    public int TakeValue = 6;
   
    public int Count { get; set; }
    public SfPager Page { get; set; }
   
    Crud _flag = Crud.List;
    Informant? _informant;
    List<Informant?>? _items;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();

    }
    protected async Task IntelChanged()
    {
        _flag = Crud.List;
        await LoadItems();
        StateHasChanged();
    }
    private void Edit(MouseEventArgs args, Informant? ticket)
    {
        _flag = Crud.Update;
        _informant = ticket;
    }

    private async Task Delete(MouseEventArgs args, Informant? ticket)
    {
        await Service.Delete(ticket);
       await IntelChanged();
    }

    private void Callback()
    {
        _flag = Crud.Add;
        StateHasChanged();
    }

    private async Task LoadItems()
    {
        Count = (await Service.GetAll()).Count();
        _items = (await Service.GetAll(SkipValue, TakeValue)).ToList();

    }

    public async Task Click(PagerItemClickEventArgs args)
    {
        SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
        TakeValue = Page.PageSize;
        await LoadItems();
        StateHasChanged();
    }
}
